import logging

from typing import List
from loggers.log_config import LogConfig

log_config = LogConfig(log_level=logging.DEBUG)

"""
Post Processor for text generated by parsers
"""
class PostProcessor:

    def __init__(self):
        self.logger = log_config.get_logger(self.__class__.__name__)

    def post_process_txt(self, extracted_txt_str: List[str]) -> List[str]:
        """
        Post processing text given a list of strings
        
        Args:
            extracted_txt_str (List[str]): The texted extracted by a parser as a list

        Returns:
            List[str]: post-processed list of strings
        """
        for i, curr_str in enumerate(extracted_txt_str):
            # remove trailing whitespaces and extra whitespaces placed between words
            curr_str = curr_str.strip()

            # Remove the "-" from the last word and join it with first word in next senctence
            # in order to complete the word. When glued together, the second half is removed from next sentence.
            if curr_str.endswith('-'):
                # take into account that '-' can be in the last sentence.
                # in this case, remove it only.
                words = curr_str.split()
                if i+1 < len(extracted_txt_str):
                    first_half = words[-1].rstrip('-')
                    split_next_sentence = extracted_txt_str[i+1].split()
                    second_half = split_next_sentence[0]
                    words[-1] = first_half.strip() + second_half.strip()
                    extracted_txt_str[i+1] = " ".join(split_next_sentence[1:])
                else:
                    words[-1] = words[-1].rstrip('-')
                curr_str = " ".join(words)

            # sometimes multiple dots are recognized instead of one
            # for ending a sentence or for continuing a sentence. 
            # Remove extra dots since we only care about one.
            

            self.logger.debug(f"{i}, post-processed string: {curr_str}" )

            extracted_txt_str[i] = curr_str

        return extracted_txt_str
        # raise NotImplementedError("This function is not implemented yet.")